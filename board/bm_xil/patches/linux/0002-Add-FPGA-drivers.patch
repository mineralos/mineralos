diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index b46e24e..284d7bf 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -530,6 +530,18 @@ config XILINX_TRAFGEN
 
 	  If unsure, say N
 
+config AXI_FPGA
+	tristate "Xilinx zynq axi fpga driver"
+	default y
+	help
+	  axi fpga driver
+
+config FPGA_MEM
+	tristate "Xilinx fpga mem driver"
+	default y
+	help
+	  fpga mem driver
+
 source "drivers/misc/jesd204b/Kconfig"
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 7cea0d5..947d045 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -32,6 +32,8 @@ obj-$(CONFIG_ISL29020)		+= isl29020.o
 obj-$(CONFIG_SENSORS_TSL2550)	+= tsl2550.o
 obj-$(CONFIG_DS1682)		+= ds1682.o
 obj-$(CONFIG_TI_DAC7512)	+= ti_dac7512.o
+obj-$(CONFIG_AXI_FPGA)          += axi_fpga.o
+obj-$(CONFIG_FPGA_MEM)          += fpga_mem.o
 obj-$(CONFIG_C2PORT)		+= c2port/
 obj-$(CONFIG_HMC6352)		+= hmc6352.o
 obj-y				+= eeprom/
diff --git a/drivers/misc/axi_fpga.c b/drivers/misc/axi_fpga.c
new file mode 100644
index 0000000..812b012
--- /dev/null
+++ b/drivers/misc/axi_fpga.c
@@ -0,0 +1,194 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>				//virt_to_phys
+#include <linux/ioport.h>		//request_mem_region
+#include <linux/slab.h>			//kmalloc and kfree
+#include <linux/mm.h>			//remap_pfn_range
+#include <linux/device.h>		//class_create
+#include "axi_fpga.h"
+
+unsigned int *axi_base_vir_addr=NULL;
+struct resource *axi_base_vir_mem_addr=NULL;
+dev_t axi_fpga_dev_num;
+struct cdev *p_axi_fpga_dev=NULL;
+static int axi_fpga_major = 0;
+struct class *axi_fpga_class = NULL;
+
+/*
+void reset_lwhps2fpga(void)
+{
+	char *p = "lwhps2fpga_vir_addr";
+	unsigned int *lwhps2fpga_vir_addr;
+	struct resource *lwhps2fpga_vir_mem_addr;
+	unsigned int value = 0xdeadbeef;
+	unsigned int i=0;
+	
+	lwhps2fpga_vir_mem_addr = request_mem_region(RESET_MANAGER_BASE_ADDR + BRGMODRST_ADDR, 4, p);
+	if(!lwhps2fpga_vir_mem_addr)
+	{
+		printk("lwhps2fpga_vir_addr request_mem_region failed!\n");
+	}
+	
+	lwhps2fpga_vir_addr = ioremap(RESET_MANAGER_BASE_ADDR + BRGMODRST_ADDR, 4);
+	if(!lwhps2fpga_vir_addr)
+	{
+		printk("lwhps2fpga_vir_addr ioremap failed!\n");
+	}
+	
+	value = ioread32(lwhps2fpga_vir_addr);
+	printk("Original value in RESET_MANAGER_BASE_ADDR + BRGMODRST_ADDR is 0x%x\n", value);
+	
+	value |= 0x00000002;
+	iowrite32(value, lwhps2fpga_vir_addr);
+	
+	//usleep(500);
+	for(i=0;i<10000;i++)
+	{
+		i = i;
+	}
+	
+	value &= 0xfffffffd;
+	iowrite32(value, lwhps2fpga_vir_addr);	
+    
+    iounmap(lwhps2fpga_vir_addr);
+    release_mem_region(RESET_MANAGER_BASE_ADDR + BRGMODRST_ADDR, 4);
+}
+*/
+
+static int axi_fpga_dev_open(struct inode *inode, struct file *filp)
+{
+	//printk(KERN_EMERG "axi fpga dev is open!\n");
+	return 0;
+}
+
+static ssize_t axi_fpga_dev_mmap(struct file *filp, struct vm_area_struct *vma)  
+{  
+	int ret;  
+	//printk(KERN_EMERG "In axi_fpga_dev_mmap!\n");
+	
+	vma->vm_flags |= VM_IO;
+	vma->vm_flags |= (VM_DONTEXPAND | VM_DONTDUMP);
+	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);	//禁止了相关页的cache和写缓冲(write buffer)
+	
+	ret = remap_pfn_range(vma,  
+				vma->vm_start,  
+				BASE_PHYS_ADDR >> PAGE_SHIFT,
+				//vma->vm_pgoff,
+				vma->vm_end-vma->vm_start,  
+				vma->vm_page_prot);  
+    
+	if(ret != 0)
+	{   
+		printk("axi_fpga_dev_mmap error!\n");
+		return -11;  
+	}  
+    
+	return 0;  
+}
+
+static int axi_fpga_dev_release(struct inode *node, struct file* filp)
+{
+	//printk(KERN_EMERG "axi fpga dev is released!\n");
+	return 0;
+}
+
+static const struct file_operations axi_fpga_dev_fops =
+{
+	.owner = THIS_MODULE,
+	.open = axi_fpga_dev_open,
+	.mmap = axi_fpga_dev_mmap,
+	.release = axi_fpga_dev_release,
+};
+
+static int __init axi_fpga_dev_init(void)
+{
+	int ret;
+	char *p = "axi_fpga_vir_mem";
+	
+	printk("In axi fpga driver!\n");
+	
+	//reset_lwhps2fpga();
+	
+	if(axi_fpga_major)
+	{
+		axi_fpga_dev_num = MKDEV(axi_fpga_major, 0);
+		ret = register_chrdev_region(axi_fpga_dev_num, 1, "axi_fpga_dev");
+	}
+	else
+	{
+		ret = alloc_chrdev_region(&axi_fpga_dev_num, 0, 1, "axi_fpga_dev");
+	}
+	if(ret < 0)
+	{
+		printk("alloc axi_fpga_dev fail!\n");
+		return ret;
+	}
+	
+	p_axi_fpga_dev = kmalloc(sizeof(struct cdev), GFP_KERNEL);
+	if(!p_axi_fpga_dev)
+	{
+		printk("kmalloc cdev fail!\n");
+		return 1;
+	}
+	
+	cdev_init(p_axi_fpga_dev, &axi_fpga_dev_fops);
+	p_axi_fpga_dev->owner = THIS_MODULE;
+	
+	ret = cdev_add(p_axi_fpga_dev, axi_fpga_dev_num, 1);
+	if(ret)
+	{
+		printk("add axi_fpga_dev fail!\n");
+		return ret;
+	}
+#if 1	
+	axi_base_vir_mem_addr = request_mem_region(BASE_PHYS_ADDR, TOTAL_LEN, p);
+	if(!axi_base_vir_mem_addr)
+	{
+		printk("request_mem_region failed!\n");
+		return 1;
+	}
+	printk("request_mem_region OK!\n");
+	
+	axi_base_vir_addr = ioremap(BASE_PHYS_ADDR, TOTAL_LEN);
+	if(!axi_base_vir_addr)
+	{
+		printk("ioremap fail!\n");
+		printk("!!!*axi_base_vir_addr = 0x%x\n", (unsigned int)axi_base_vir_addr);
+		return -1;
+	}
+	printk("AXI fpga dev virtual address is 0x%x\n", (unsigned int)axi_base_vir_addr);
+	
+	printk("*axi_base_vir_addr = 0x%x\n", ioread32(axi_base_vir_addr));
+	//printk("*(base_vir_addr + 0x100) = 0x%x\n", ioread32(base_vir_addr + 0x100));
+#endif	
+	axi_fpga_class = class_create(THIS_MODULE, "axi_fpga_dev");
+	if (IS_ERR(axi_fpga_class))
+	{
+        	printk("Err:failed in creating axi fpga class.\n");
+        	return -1;
+	}
+	device_create(axi_fpga_class, NULL, axi_fpga_dev_num, NULL, "axi_fpga_dev");
+	
+	return 0;
+}
+
+static void __exit axi_fpga_dev_exit(void)
+{
+    unregister_chrdev_region(axi_fpga_dev_num, 1);
+	cdev_del(p_axi_fpga_dev);
+    kfree(p_axi_fpga_dev);
+    iounmap(axi_base_vir_addr);
+	release_mem_region(BASE_PHYS_ADDR, TOTAL_LEN);
+    device_destroy(axi_fpga_class, axi_fpga_dev_num);
+    class_destroy(axi_fpga_class);
+	printk("Bye Bye axi fpga driver!\n");
+}
+
+module_init(axi_fpga_dev_init);
+module_exit(axi_fpga_dev_exit);
+
+MODULE_LICENSE("Dual BSD/GPL");
diff --git a/drivers/misc/axi_fpga.h b/drivers/misc/axi_fpga.h
new file mode 100644
index 0000000..dac79e3
--- /dev/null
+++ b/drivers/misc/axi_fpga.h
@@ -0,0 +1,56 @@
+#ifndef __AXI_FPGA
+#define __AXI_FPGA
+
+#define LWFPGASLAVES_ADDR	0x43C00000
+#define BASE_PHYS_ADDR          (LWFPGASLAVES_ADDR+0x00000000)
+#define TOTAL_LEN		0x160
+
+
+#define RESET_MANAGER_BASE_ADDR 0xFFD05000
+#define BRGMODRST_ADDR		0x1C
+
+#if 0
+#define BASE_PHYS_ADDR		(LWFPGASLAVES_ADDR+0x00000000)
+#define QN_RN_ADDR			(BASE_PHYS_ADDR + 0)
+#define TW_ADDR				(BASE_PHYS_ADDR + 0x40)
+#define QN_WD_ADDR			(BASE_PHYS_ADDR + 0x40)
+#define BC_ADDR				(BASE_PHYS_ADDR + 0x40)
+
+#define CONTROL_REG			(BASE_PHYS_ADDR + 0x100)
+#define WORK_CALC_NUM		(BASE_PHYS_ADDR + 0x102)
+#define COINBASE1_LEN		(BASE_PHYS_ADDR + 0x104)
+#define COINBASE2_LEN		(BASE_PHYS_ADDR + 0x106)
+#define NONCE2				(BASE_PHYS_ADDR + 0x108)
+#define MERKLES_NUM			(BASE_PHYS_ADDR + 0x10C)
+#define BLK_HDR_VERSION		(BASE_PHYS_ADDR + 0x110)
+#define HDR_TIMESTAMP		(BASE_PHYS_ADDR + 0x114)
+#define TARGET_BITS			(BASE_PHYS_ADDR + 0x118)
+#define RESERVED			(BASE_PHYS_ADDR + 0x11C)
+#define HDR_PREV_HASH		(BASE_PHYS_ADDR + 0x120)
+#define MERKLE_ROOT			(BASE_PHYS_ADDR + 0x140)
+#define MIDSTATE			(BASE_PHYS_ADDR + 0x160)
+#define DATA_ADDR			(BASE_PHYS_ADDR + 0x10000)	//include Coinbase1, Work_nonce1, Work_nonce2, Coinbase2, Merkle_bin
+
+#define TOTAL_LEN_1			0x180		//for all the data but except DATA
+#define TOTAL_LEN_2			0x10000		//for DATA
+#define TOTAL_LEN			0x20000
+//control register define
+#define TYPE				0x80
+#define CAL_START_STOP		0x40
+#define CAL_DONE			0x20
+#define CAL_MODE			0x10
+#define PADDING_DONE		0x08
+#define PING_PONG_RAM_SEL	0x04
+
+#define RESET_MANAGER_BASE_ADDR	0xFFD05000
+#define BRGMODRST_ADDR			0x1C
+
+
+#define QN_RN_LEN	52
+#define TW_LEN		52
+#define QN_WD_LEN	52
+#define BC_LEN		8
+#endif
+
+
+#endif
diff --git a/drivers/misc/fpga_mem.c b/drivers/misc/fpga_mem.c
new file mode 100644
index 0000000..6abd888
--- /dev/null
+++ b/drivers/misc/fpga_mem.c
@@ -0,0 +1,148 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>				//virt_to_phys
+#include <linux/ioport.h>		//request_mem_region
+#include <linux/slab.h>			//kmalloc and kfree
+#include <linux/mm.h>			//remap_pfn_range
+#include <linux/device.h>		//class_create
+#include "fpga_mem.h"
+
+unsigned int *base_vir_addr=NULL;
+struct resource *base_vir_mem_addr=NULL;
+dev_t fpga_mem_num;
+struct cdev *p_fpga_mem=NULL;
+static int fpga_mem_major = 0;
+struct class *fpga_mem_class = NULL;
+
+static int fpga_mem_open(struct inode *inode, struct file *filp)
+{
+	//printk(KERN_EMERG "fpga mem is open!\n");
+	return 0;
+}
+
+static ssize_t fpga_mem_mmap(struct file *filp, struct vm_area_struct *vma)  
+{  
+	int ret;  
+	//printk(KERN_EMERG "In axi_fpga_dev_mmap!\n");
+	
+	vma->vm_flags |= VM_IO;
+	vma->vm_flags |= (VM_DONTEXPAND | VM_DONTDUMP);
+	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);	//禁止了相关页的cache和写缓冲(write buffer)
+	
+	ret = remap_pfn_range(vma,  
+				vma->vm_start,  
+				(FPGA_MEM_START_ADDR + FPGA_MEM_OFFSET_ADDR) >> PAGE_SHIFT,
+				//vma->vm_pgoff,
+				vma->vm_end-vma->vm_start,  
+				vma->vm_page_prot);  
+    
+	if(ret != 0)
+	{   
+		printk("fpga_mem_mmap error!\n");
+		return -9;  
+	}  
+    
+	return 0;  
+}
+
+static int fpga_mem_release(struct inode *node, struct file* filp)
+{
+	//printk(KERN_EMERG "fpga mem is released!\n");
+	return 0;
+}
+
+static const struct file_operations fpga_mem_fops =
+{
+	.owner = THIS_MODULE,
+	.open = fpga_mem_open,
+	.mmap = fpga_mem_mmap,
+	.release = fpga_mem_release,
+};
+
+static int __init fpga_mem_init(void)
+{
+	int ret;
+	char *p = "fpga_vir_mem";
+	
+	printk("In fpga mem driver!\n");
+	
+	if(fpga_mem_major)
+	{
+		fpga_mem_num = MKDEV(fpga_mem_major, 0);
+		ret = register_chrdev_region(fpga_mem_num, 1, "fpga_mem");
+	}
+	else
+	{
+		ret = alloc_chrdev_region(&fpga_mem_num, 0, 1, "fpga_mem");
+	}
+	if(ret < 0)
+	{
+		printk("alloc fpga_mem fail!\n");
+		return ret;
+	}
+	
+	p_fpga_mem = kmalloc(sizeof(struct cdev), GFP_KERNEL);
+	if(!p_fpga_mem)
+	{
+		printk("kmalloc cdev fail!\n");
+		return -10;
+	}
+	
+	cdev_init(p_fpga_mem, &fpga_mem_fops);
+	p_fpga_mem->owner = THIS_MODULE;
+	
+	ret = cdev_add(p_fpga_mem, fpga_mem_num, 1);
+	if(ret)
+	{
+		printk("add fpga_mem fail!\n");
+		return -11;
+	}
+	
+    base_vir_mem_addr = request_mem_region(FPGA_MEM_START_ADDR + FPGA_MEM_OFFSET_ADDR, FPGA_MEM_LEN, p);
+	if(!base_vir_mem_addr)
+	{
+		printk("request_mem_region failed!\n");
+		return -12;
+	}
+	printk("request_mem_region OK!\n");
+	
+	base_vir_addr = ioremap(FPGA_MEM_START_ADDR + FPGA_MEM_OFFSET_ADDR, FPGA_MEM_LEN);
+	if(!base_vir_addr)
+	{
+		printk("ioremap fail!\n");
+		printk("!!!*base_vir_addr = 0x%x\n", (unsigned int)base_vir_addr);
+		return -13;
+	}
+	printk("fpga mem virtual address is 0x%x\n", (unsigned int)base_vir_addr);
+	
+	fpga_mem_class = class_create(THIS_MODULE, "fpga_mem");
+	if (IS_ERR(fpga_mem_class))
+	{
+        	printk("Err:failed in creating fpga mem class.\n");
+        	return -14;
+	}
+	device_create(fpga_mem_class, NULL, fpga_mem_num, NULL, "fpga_mem");
+	
+	return 0;
+}
+
+static void __exit fpga_mem_exit(void)
+{
+    unregister_chrdev_region(fpga_mem_num, 1);
+	cdev_del(p_fpga_mem);
+    kfree(p_fpga_mem);
+    iounmap(base_vir_addr);
+	release_mem_region(FPGA_MEM_START_ADDR + FPGA_MEM_OFFSET_ADDR, FPGA_MEM_LEN);
+    device_destroy(fpga_mem_class, fpga_mem_num);
+    class_destroy(fpga_mem_class);
+	printk("Bye Bye fpga mem driver!\n");
+}
+
+module_init(fpga_mem_init);
+module_exit(fpga_mem_exit);
+
+MODULE_LICENSE("Dual BSD/GPL");
diff --git a/drivers/misc/fpga_mem.h b/drivers/misc/fpga_mem.h
new file mode 100644
index 0000000..491bd94
--- /dev/null
+++ b/drivers/misc/fpga_mem.h
@@ -0,0 +1,9 @@
+#ifndef __FPGA_MEM
+#define __FPGA_MEM
+
+#define FPGA_MEM_START_ADDR     0x0
+#define FPGA_MEM_OFFSET_ADDR    0x3F000000  // 1008M bytes
+//#define FPGA_MEM_OFFSET_ADDR    0x1F000000  // 496M bytes
+#define FPGA_MEM_LEN            0x1000000   // 16M bytes
+
+#endif
-- 
2.7.4

