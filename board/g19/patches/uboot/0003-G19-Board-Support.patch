diff --git a/common/Makefile b/common/Makefile
index ecc23e6..bb67712 100644
--- a/common/Makefile
+++ b/common/Makefile
@@ -13,6 +13,7 @@ obj-y += exports.o
 obj-y += hash.o
 obj-$(CONFIG_HUSH_PARSER) += cli_hush.o
 obj-$(CONFIG_AUTOBOOT) += autoboot.o
+obj-$(CONFIG_AUTOBOOT) += dm_update.o
 
 # This option is not just y/n - it can have a numeric value
 ifdef CONFIG_BOOT_RETRY_TIME
diff --git a/common/dm_update.c b/common/dm_update.c
new file mode 100644
index 0000000..3e76210
--- /dev/null
+++ b/common/dm_update.c
@@ -0,0 +1,80 @@
+/*
+ * (C) Copyright 2000
+ * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <autoboot.h>
+#include <bootretry.h>
+#include <cli.h>
+#include <console.h>
+#include <mmc.h>
+#include <dm_update.h>
+
+// driver/gpio/dm_gpio.c
+extern int dm_gpio_getkey_ipset(void);
+extern void dm_gpio_setled_green(int);
+extern void dm_gpio_setled_red(int);
+
+bool dm_check_update_condition(void)
+{
+	int i;
+	struct mmc *mmc = NULL;
+
+	
+	mmc = find_mmc_device(0);
+	if(mmc == NULL)
+	{
+		return false;
+	}
+
+	if(mmc_init(mmc) != 0)
+	{
+		return false;
+	}
+
+	for(i = 0; i < 10; i++)
+	{
+		mdelay(100);
+		
+       		if(dm_gpio_getkey_ipset())
+		{
+			return false;
+		}
+		//printf("ipset detect:%d\n",i);
+	}
+	
+	return true;
+}
+
+void dm_auto_update_nand(void)
+{
+	#define UPDATE_CMD	"run update"
+	
+	if(!dm_check_update_condition())
+	{
+		return;
+	}
+
+	printf("****************** update start ********************** \n");
+	
+   	dm_gpio_setled_red(1);
+	printf("cmd >>> %s \n", UPDATE_CMD);
+	run_command_list(UPDATE_CMD, -1, 0);
+
+	// light out red led
+    dm_gpio_setled_red(0);
+	
+	printf("****************** update finshed ********************** \n");
+
+	while(1)
+	{
+        dm_gpio_setled_green(1);
+		mdelay(500);
+        dm_gpio_setled_green(0);
+		mdelay(500);
+	}
+}
+
diff --git a/common/main.c b/common/main.c
index 2116a9e..04e641e 100644
--- a/common/main.c
+++ b/common/main.c
@@ -12,6 +12,7 @@
 #include <cli.h>
 #include <console.h>
 #include <version.h>
+#include <dm_update.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -63,6 +64,8 @@ void main_loop(void)
 	if (cli_process_fdt(&s))
 		cli_secure_boot_cmd(s);
 
+	dm_auto_update_nand();
+
 	autoboot_command(s);
 
 	cli_loop();
diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index 8d9ab52..53932c3 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -221,4 +221,12 @@ config MPC85XX_GPIO
 
 	  The driver has been tested on MPC85XX, but it is likely that other
 	  PowerQUICC III devices will work as well.
+
+config ZYNQ_DM_GPIO
+	bool "Dm GPIO driver"
+	depends on DM_GPIO
+	default y
+	help
+	  Supports Dm GPIO function
+
 endmenu
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 8939226..06be2f9 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -58,3 +58,4 @@ obj-$(CONFIG_MVEBU_GPIO)	+= mvebu_gpio.o
 obj-$(CONFIG_MSM_GPIO)		+= msm_gpio.o
 obj-$(CONFIG_$(SPL_)PCF8575_GPIO)	+= pcf8575_gpio.o
 obj-$(CONFIG_PM8916_GPIO)	+= pm8916_gpio.o
+obj-$(CONFIG_ZYNQ_DM_GPIO)	+= dm_gpio.o
diff --git a/drivers/gpio/dm_gpio.c b/drivers/gpio/dm_gpio.c
new file mode 100644
index 0000000..9604a62
--- /dev/null
+++ b/drivers/gpio/dm_gpio.c
@@ -0,0 +1,132 @@
+/******************************************************************************
+ * Copyright (c) 2005-2018 Innosilicon.
+ * Filename:    dm_gpio.c
+ * Author:      duanhao
+ * Create:      20180103
+ * Version:     1.0
+ * Description: Dm gpio driver
+ * Change Log:  Modified by zhangyh 20180411
+ *******************************************************************************/
+
+/************************************ Header ***********************************/
+#include <common.h>
+
+/************************************ Macros ***********************************/
+#define DM_PERIPHERAL_BASE            (0x43C00000)
+//#define DM_SPI_BASE                   (0x43c30000)
+//#define DM_FAN_BASE                   (0x43C00000)
+
+#define DM_PERIPHERAL_REG0_OFFSET     (0)
+#define DM_PERIPHERAL_REG1_OFFSET     (4)
+#define DM_PERIPHERAL_REG2_OFFSET     (8)
+#define DM_PERIPHERAL_REG3_OFFSET     (12)
+#define DM_PERIPHERAL_REG4_OFFSET     (16)
+#define DM_PERIPHERAL_REG5_OFFSET     (20)
+#define DM_PERIPHERAL_REG6_OFFSET     (24)
+#define DM_PERIPHERAL_REG7_OFFSET     (28)
+#define DM_PERIPHERAL_REG8_OFFSET     (32)
+#define DM_PERIPHERAL_REG9_OFFSET     (36)
+#define DM_PERIPHERAL_REG10_OFFSET    (40)
+
+#define DM_KEY_IPSET_REG              (DM_PERIPHERAL_REG10_OFFSET)
+#define DM_KEY_IPSET_BIT              (16)
+
+#define DM_LED_GREEN_REG              (DM_PERIPHERAL_REG9_OFFSET)
+#define DM_LED_GREEN_BIT              (9)
+
+#define DM_LED_RED_REG                (DM_PERIPHERAL_REG9_OFFSET)
+#define DM_LED_RED_BIT                (10)
+
+/********************************* Global Defines ******************************/
+
+
+/********************************** Prototypes *********************************/
+static int dm_reg_read(u32 regaddr);
+
+static void dm_reg_write(u32 regaddr, u32 regval);
+
+/*********************************** Functions *********************************/
+/*******************************************************************************
+ * Name:        dm_reg_read
+ * Description: read register
+ * Input:       regaddr - physical address of the register
+ * Output:      none
+ * Return:      register value
+ ******************************************************************************/
+static int dm_reg_read(u32 regaddr)
+{
+    return *(volatile u32*) regaddr;  
+}
+
+/*******************************************************************************
+ * Name:        dm_reg_write
+ * Description: write register
+ * Input:       regaddr - physical address of the register
+ *              regval  - value to be set to the register
+ * Output:      none
+ * Return:      none
+ ******************************************************************************/
+static void dm_reg_write(u32 regaddr, u32 regval)
+{
+    *(volatile u32*) regaddr = regval; 
+}
+
+/*******************************************************************************
+ * Name:        dm_gpio_getkey_ipset
+ * Description: get the state of IPSET key
+ * Input:       none
+ * Output:      none
+ * Return:      state of IPSET key
+ ******************************************************************************/
+int dm_gpio_getkey_ipset(void)
+{
+    uint32_t regval;
+    regval = dm_reg_read(DM_PERIPHERAL_BASE + DM_KEY_IPSET_REG);
+    return (regval >> DM_KEY_IPSET_BIT) & 0x1;
+}
+
+/*******************************************************************************
+ * Name:        dm_gpio_setled_green
+ * Description: set the green led state
+ * Input:       value - 0. led off; others. led on
+ * Output:      none
+ * Return:      none
+ ******************************************************************************/
+void dm_gpio_setled_green(int value)
+{
+    uint32_t regaddr = 0;
+    uint32_t regval  = 0;
+
+    regaddr = DM_PERIPHERAL_BASE + DM_LED_GREEN_REG;
+
+    regval = dm_reg_read(regaddr);
+    if (value)
+        regval |= (1 << DM_LED_GREEN_BIT);    // led on
+    else
+        regval &= ~(1 << DM_LED_GREEN_BIT);   // led off 
+    
+    dm_reg_write(regaddr, regval);
+}
+
+/*******************************************************************************
+ * Name:        dm_gpio_setled_red
+ * Description: set the red led state
+ * Input:       value - 0. led off; others. led on
+ * Output:      none
+ * Return:      none
+ ******************************************************************************/
+void dm_gpio_setled_red(int value)
+{
+    uint32_t regaddr = 0;
+    uint32_t regval  = 0;
+
+    regaddr = DM_PERIPHERAL_BASE + DM_LED_RED_REG;
+    regval = dm_reg_read(DM_PERIPHERAL_BASE + DM_LED_RED_REG);
+    if (value)
+        regval |= (1 << DM_LED_RED_BIT);      // led on
+    else
+        regval &= ~(1 << DM_LED_RED_BIT);     // led off
+
+    dm_reg_write(regaddr, regval);
+}
+
diff --git a/include/dm_update.h b/include/dm_update.h
new file mode 100644
index 0000000..b98c576
--- /dev/null
+++ b/include/dm_update.h
@@ -0,0 +1,2 @@
+extern void dm_auto_update_nand(void);
+
